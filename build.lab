import lab
import std

import "@cstd/build.lab" as cstdMod
import "@std/build.lab" as stdMod
import "@html/build.lab" as htmlMod

using namespace std;

struct JobAndContext {
    var ctx : *mut AppBuildContext
    var job : *mut LabJob
}

var jc : JobAndContext

func build(ctx : *mut AppBuildContext) {

    // the cstd module
    var cstd_module = cstdMod.get(ctx);
    if(cstd_module == null) {
        return
    }

    // the std module
    var std_module = stdMod.get(ctx);
    if(std_module == null) {
        return
    }

    // the std module
    var html_module = htmlMod.get(ctx);
    if(html_module == null) {
        return
    }

    var dependencies = [ cstd_module, std_module, html_module ]
    const module = ctx.chemical_dir_module(std::string_view(""), std::string_view("main"), lab::rel_path_to("src").to_view(), dependencies);

    const exe_job = ctx.build_exe(std::string_view("docs"), [ module ])
    jc.ctx = ctx;
    jc.job = exe_job;
    ctx.on_finished((data : *void) => {
        const jx = data as *mut JobAndContext
        if(jx.job.status == LabJobStatus.Success) {
            jx.ctx.launch_executable(jx.job.abs_path.to_view(), true);
        }
    }, &jc);

    cstd_module.llvm_ir_path = ctx.llvm_ir_path(exe_job, cstd_module);
    std_module.llvm_ir_path = ctx.llvm_ir_path(exe_job, std_module);
    html_module.llvm_ir_path = ctx.llvm_ir_path(exe_job, html_module);
    module.llvm_ir_path = ctx.llvm_ir_path(exe_job, module);

}